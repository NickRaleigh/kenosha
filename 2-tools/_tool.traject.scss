@function remove-duplicates($list, $recursive: false) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      } @else {
        $result: append($result, $item);
      }
    }
  }

  @return $result;
}

@mixin traject-array($childrenObj, $settingsArray) {
  $gridTemplate: '';
  $gridModifiers: '';
  $breakPoint: 'default';
  @each $setting in $settingsArray {

    //loop over each setting to remove grid-template-area from special grid modifiers.
      $first-char: str-slice(quote($setting), 1,1);
      @if ($first-char != _) {
        $gridTemplate: join($gridTemplate, $setting, comma);
      }
      @else {
        $gridModifiers: join($gridModifiers, $setting, comma);
      }
    }

    // convert gridTemplate to set of strings for css
    $gridTemplateCss: null;
    @each $row in $gridTemplate {
      @if ($gridTemplateCss == null) {
        $gridTemplateCss: $row;
      }
      @else {
        $gridTemplateCss: join($gridTemplateCss,$row, space);
      }
    }

      grid-template-areas: $gridTemplateCss;
      // TODO: Add grid gap.

    //process grid modifiers
    @include parseModifiers($childrenObj, $breakPoint, $gridModifiers);

    // parse traject for internet explorer
    $preventDefaultDuplicates: 0;
    $preventBpDuplicates: 0;
    @include parseIE($childrenObj, $gridTemplate, $breakPoint, $preventDefaultDuplicates, $preventBpDuplicates);

}

@mixin parseModifiers($childrenObj, $breakPoint, $modifiers) {

  @each $modifier in $modifiers {

    $parsedModifierName: str-replace($modifier, $search:'(', $replace: ' ');
    $parsedModifierName: str-replace($parsedModifierName, $search:':', $replace: ' ');
    $parsedModifierName: str-split($parsedModifierName, ' ');
    $parsedModifierName: unquote(nth($parsedModifierName, 1));
    $selector: false;

    $parsedTarget: false;
    @each $name, $char in $modifier {
      @if ((str-index($name, ':') and ($parsedModifierName == _hide or $parsedModifierName == _show))) {
        $modifier: str-replace($modifier, ' ');
        $parsedTarget: str-split($modifier, ':');
        $parsedTarget: unquote(nth($parsedTarget, 2));
      }
    }

    $parsedModifier: null;
    @if ($parsedModifierName != _hide and $parsedModifierName != _show) {
      $parsedModifier: unquote(nth(
        str-split($modifier, ': ')
      , 2));
    }

    @if ($parsedTarget) {
      $selector: map-get($childrenObj, $parsedTarget);
    }

    // hide
    @if ($parsedModifierName == _hide) {
      @if ($breakPoint == 'default') {
        #{$selector} {
          display: none;
        }
      } @else {
        @include media('screen', '#{$breakPoint}') {
          #{$selector} {
            display: none;
          }
        }
      }
    }

    // show
    @if ($parsedModifierName == _show) {
      @if ($breakPoint == 'default') {
        #{$selector} {
          display: block;
          display: initial;

        }
      } @else {
          @include media('screen', '#{$breakPoint}') {
          #{$selector} {
            display: block;
            display: initial;
          }
        }
      }
    }

    // grid template rows
    @if ($parsedModifierName == _templateRows or $parsedModifierName == _tr or $parsedModifierName == _trows) {
      @if ($breakPoint == 'default') {
        grid-template-rows: $parsedModifier;
        -ms-grid-rows: $parsedModifier !important;
      } @else {
          @include media('screen', '#{$breakPoint}') {
            grid-template-rows: $parsedModifier;
            -ms-grid-rows: $parsedModifier !important;
        }
      }
    }

    // grid template columns
    @if ($parsedModifierName == _templateColumns or $parsedModifierName == _tc or $parsedModifierName == _tcolumns) {
      @if ($breakPoint == 'default') {
        grid-template-columns: $parsedModifier;
        -ms-grid-columns: $parsedModifier !important;
      } @else {
          @include media('screen', '#{$breakPoint}') {
            grid-template-columns: $parsedModifier;
            -ms-grid-columns: $parsedModifier !important;
        }
      }
    }
  }
}

@mixin parseIE($childrenObj, $gridTemplate, $breakPoint, $preventDefaultDuplicates, $preventBpDuplicates) {
  display:-ms-grid;

  //convert grid template to map:
  $masterColumnCount: null;
  $templateMaster: ();
  $i: 1;
  @each $row in $gridTemplate {
    $row: str-replace($row, $search:',', $replace: '');
    $row: str-replace($row, $search:'"', $replace: '');
    $row: str-replace($row, $search:')', $replace: '');
    $row: str-replace($row, $search:'(', $replace: '');

    $rowArr: str-split(unquote($row), ' ');
    $masterColumnCount: length($rowArr);
    $templateMaster: map-merge($templateMaster, (#{$i}: $rowArr));
    $i: $i + 1;
  }

  $masterRowCount: length($templateMaster);
  $masterColumnCount: $masterColumnCount;
  // loop over children
  @each $child, $selector in $childrenObj {
    $origin-row: null;
    $origin-column: null;
    $span-x: null;
    $span-y: null;
    $coordinates: null;
    // loop over rows
    @each $rowNumber, $row in $templateMaster {
      // loop over columns
      $columnNumber: 1;
      @each $column in $row {
        // get coordinates
        @if ($column == $child) {
          $joinedCoordinates: to-number("#{$rowNumber}.#{$columnNumber}");
          @if ($coordinates == null) {
            $coordinates: $joinedCoordinates;
          } @else {
            $coordinates: join($coordinates, $joinedCoordinates);
          }
        }
        $columnNumber: $columnNumber + 1;
      }
    }

    // calculate spans
    $row-span: null;
    $column-span: null;
    @if ($coordinates != null ) {
      @each $point in $coordinates {
        // this assumes 1 digit coordinates
        // add decimal delimeter
        $extractedRowColumn: str-split(quote($point), '.');

        $extractedRow: nth($extractedRowColumn, 1);
        $extractedRow: to-number($extractedRow);

        $extractedColumn: nth($extractedRowColumn, 2);
        $extractedColumn: to-number($extractedColumn);

        @if ($row-span == null) {
          $row-span: $extractedRow;
        }
        @else {
          $row-span: join($row-span, $extractedRow);
        }
        @if ($column-span == null) {
          $column-span: $extractedColumn;
        }
        @else {
          $column-span: join($column-span, $extractedColumn);
        }
      }

      $row-span: max($row-span...) - min($row-span...) + 1;
      $column-span: max($column-span...) - min($column-span...) + 1;


      $originCoordinate: quote(min($coordinates...));
      $gridRowColumn: str-split(unquote($originCoordinate), '.');

      $gridRow: nth($gridRowColumn, 1);
      $gridRow: to-number($gridRow);

      $gridColumn: nth($gridRowColumn, 2);
      $gridColumn: to-number($gridColumn);

    //calculate ms-grid-columns
    $msGridRows: unquote(str-repeat("1fr ", $masterRowCount));
    $msGridColumns: unquote(str-repeat("1fr ", $masterColumnCount));


    @if ($breakPoint == 'default') {
      @if ($preventDefaultDuplicates == 0){
        -ms-grid-columns: $msGridColumns;
        -ms-grid-rows: $msGridRows;
        $preventDefaultDuplicates: 1;
      }
      } @else {
      @if ($preventBpDuplicates == 0) {
        @include media('screen', '#{$breakPoint}') {
          -ms-grid-columns: $msGridColumns;
          -ms-grid-rows: $msGridRows;
          $preventDefaultDuplicates: 1;
          }
        }
      }

      #{$selector} {
        @if ($breakPoint == 'default') {
          -ms-grid-row: $gridRow;
          -ms-grid-column: $gridColumn;
          -ms-grid-row-span: $row-span;
          -ms-grid-column-span: $column-span;
        } @else {
          @include media('screen', '#{$breakPoint}') {
            -ms-grid-row: $gridRow;
            -ms-grid-column: $gridColumn;
            -ms-grid-row-span: $row-span;
            -ms-grid-column-span: $column-span;
          }
        }

      }
    }
  }
}

@function detect-children($layout) {
  $children: ();

  $layout: remove-duplicates($layout);
  $layout: to-string($layout);
  $layout: str-replace($layout, '\"');
  $layout: str-replace($layout, '(');
  $layout: str-replace($layout, ')');
  $layout: str-replace($layout, '.');
  $layout: str-split($layout, " ");
  $layout: remove-duplicates($layout);


  @each $child in $layout {
      @if ($child != '.' and str-index($child, '=') == null and str-index($child, '>') == null and str-index($child, '<') == null and str-index($child, '_hide:') == null and str-index($child, '_show:') == null and str-index($child, '_tc:') == null and str-index($child, '_templateColumns:') == null and str-index($child, '_tcolumns:') == null and str-index($child, '_tr:') == null and str-index($child, '_templateRows:') == null and str-index($child, '_trows:') == null) {
      $list-item: (
        $child: '&__#{$child}'
      );
      $children: map-merge($children, $list-item);
    }
    @if (str-index($child, '_hide:')) {
      $hider: str-replace($child, '_hide:');
      $list-item: (
        $hider: '&__#{$hider}'
      );
      $children: map-merge($children, $list-item);
    }
  }



  @return $children;
}

@mixin traject($settingsObj, $childrenObj:null) {
  // create grid
  display: grid;

  @if ($childrenObj == null) {
    $childrenObj: detect-children($settingsObj);
  }

  // name template-areas of children
  @if ($childrenObj != null) {
    @each $name, $selector in $childrenObj {
      #{$selector} {
        grid-area: $name;
      }
    }
  }

  @if(type-of($settingsObj) == 'list') {
    @include traject-array($childrenObj, $settingsObj);
  }

  @else {
    // loop over entire object
    @each $breakPoint, $settings in $settingsObj {
      $gridTemplate: '';
      $gridModifiers: '';

      //loop over each setting to remove grid-template-area from special grid modifiers.
      @each $setting in $settings {
        $first-char: str-slice(quote($setting), 1,1);
        @if ($first-char != _) {
          $gridTemplate: join($gridTemplate, $setting, comma);
        }
        @else {
          $gridModifiers: join($gridModifiers, $setting, comma);
        }
      }

      // convert gridTemplate to set of strings for css
      $gridTemplateCss: null;
      @each $row in $gridTemplate {
        @if ($gridTemplateCss == null) {
          $gridTemplateCss: $row;
        }
        @else {
          $gridTemplateCss: join($gridTemplateCss,$row, space);
        }
      }

      //check breakpoint & assign css
      @if ($breakPoint == 'default') {
        grid-template-areas: $gridTemplateCss;
        // TODO: Add grid gap.
      } @else {
        @include media('screen', '#{$breakPoint}') {
          grid-template-areas: $gridTemplateCss;
        }
      }

      //process grid modifiers
      @include parseModifiers($childrenObj, $breakPoint, $gridModifiers);

      // parse traject for internet explorer
      $preventDefaultDuplicates: 0;
      $preventBpDuplicates: 0;
      @include parseIE($childrenObj, $gridTemplate, $breakPoint, $preventDefaultDuplicates, $preventBpDuplicates);

    }
  }
}
@function to-string($value) {
  @return inspect($value);
}
