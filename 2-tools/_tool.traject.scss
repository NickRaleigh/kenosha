@mixin traject($layout) {
  $children: detect-children($layout);
  $gridTemplate: '';
  $i: 1;
  @each $child in $layout {
    @if ($i == 1) {
      $gridTemplate: $child;
    }
    @else {
     $gridTemplate: join($gridTemplate, $child, space);
    }
    $i: $i + 1;
  }

  display: grid;
  grid-template-areas: $gridTemplate;

  @each $child, $selector in $children {
    #{$selector} {
      grid-area: $child;
    }
  }
}

// helper functions

@function detect-children($layout) {
  $children: ();

  $layout: remove-duplicates($layout);
  $layout: to-string($layout);
  $layout: str-replace($layout, '\"');
  $layout: str-replace($layout, '(');
  $layout: str-replace($layout, ')');
  $layout: str-replace($layout, '.');
  $layout: str-split($layout, " ");
  $layout: remove-duplicates($layout);


  @each $child in $layout {
      @if ($child != '.' and str-index($child, '=') == null and str-index($child, '>') == null and str-index($child, '<') == null and str-index($child, '_hide:') == null and str-index($child, '_show:') == null and str-index($child, '_tc:') == null and str-index($child, '_templateColumns:') == null and str-index($child, '_tcolumns:') == null and str-index($child, '_tr:') == null and str-index($child, '_templateRows:') == null and str-index($child, '_trows:') == null) {
      $list-item: (
        $child: '&__#{$child}'
      );
      $children: map-merge($children, $list-item);
    }
    @if (str-index($child, '_hide:')) {
      $hider: str-replace($child, '_hide:');
      $list-item: (
        $hider: '&__#{$hider}'
      );
      $children: map-merge($children, $list-item);
    }
  }



  @return $children;
}

@function remove-duplicates($list, $recursive: false) {
  $result: ();

  @each $item in $list {
    @if not index($result, $item) {
      @if length($item) > 1 and $recursive {
        $result: append($result, remove-duplicates($item, $recursive));
      } @else {
        $result: append($result, $item);
      }
    }
  }

  @return $result;
}

@function to-string($value) {
  @return inspect($value);
}

